{
  "swagger" : "2.0",
  "info" : {
    "description" : "Home automation server API",
    "version" : "1",
    "title" : "YODA",
    "termsOfService" : "todos",
    "contact" : {
      "name" : "Sebastien Vermeille",
      "url" : "http://192.168.1.109:8080/api",
      "email" : "sebastien.vermeille@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "192.168.1.109:8080",
  "basePath" : "/api",
  "tags" : [ {
    "name" : "Auth",
    "description" : "Operations about authentification"
  }, {
    "name" : "Beacon",
    "description" : "Operations about beacons"
  }, {
    "name" : "Group",
    "description" : "Operations about user groups"
  }, {
    "name" : "Light",
    "description" : "Operations about lights"
  }, {
    "name" : "Roles",
    "description" : "Operations about group roles"
  }, {
    "name" : "Room",
    "description" : "Operations about rooms"
  }, {
    "name" : "Rule",
    "description" : "Operations about rules"
  }, {
    "name" : "User",
    "description" : "Operations about user users"
  }, {
    "name" : "[VENDOR] Estimote",
    "description" : "Operations about Estimote"
  }, {
    "name" : "[VENDOR] Philips HUE",
    "description" : "Operations about Philips HUE"
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/auth/approve/{username}" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Approve a user",
        "description" : "",
        "operationId" : "approveUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username of the user to approve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success, user is approved",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "403" : {
            "description" : "Account is already approved"
          },
          "404" : {
            "description" : "User not found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/auth/login" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Authenticate a consumer",
        "description" : "A consumer is a device that will act as the user. (Exemple a smartphone, computer etc.)",
        "operationId" : "authenticate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Authentification",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/YodaAuth"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success, user device is authenticated",
            "schema" : {
              "$ref" : "#/definitions/Consumer"
            }
          },
          "401" : {
            "description" : "Wrong username or password"
          },
          "403" : {
            "description" : "User is not approved"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/auth/logout" : {
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Disconnect a user",
        "description" : "Not implemented yet",
        "operationId" : "logout",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success, user is disconnected"
          }
        }
      }
    },
    "/auth/register" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Register a new user",
        "description" : "",
        "operationId" : "registerUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRegistration"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success, user is registred",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "403" : {
            "description" : "An account with the same username already exists."
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/beacons" : {
      "get" : {
        "tags" : [ "Beacon" ],
        "summary" : "Get all beacons",
        "description" : "",
        "operationId" : "getBeaconList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Beacon"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Beacon" ],
        "summary" : "Add a beacon",
        "description" : "",
        "operationId" : "addBeacon",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Beacon"
            }
          }
        }
      }
    },
    "/beacons/find" : {
      "get" : {
        "tags" : [ "Beacon" ],
        "summary" : "Finds beacons by name",
        "description" : "Multiple names values can be provided with comma separated strings",
        "operationId" : "getBeaconByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Beacon"
              }
            }
          }
        }
      }
    },
    "/beacons/scan" : {
      "post" : {
        "tags" : [ "Beacon" ],
        "summary" : "Scan the whole house for beacons",
        "description" : "",
        "operationId" : "scanBeaconsFromVendor",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Beacon"
              }
            }
          }
        }
      }
    },
    "/beacons/{id}" : {
      "get" : {
        "tags" : [ "Beacon" ],
        "summary" : "Get a beacon",
        "description" : "",
        "operationId" : "getBeacon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Beacon"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Beacon" ],
        "summary" : "Delete a beacon",
        "description" : "",
        "operationId" : "deleteBeacon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/beacons/{minor}/hook" : {
      "post" : {
        "tags" : [ "Beacon" ],
        "summary" : "Declare that the current logged in device is next to a beacon",
        "description" : "",
        "operationId" : "hook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "minor",
          "in" : "path",
          "description" : "Minor of the nearest beacon",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Not authenticated"
          },
          "404" : {
            "description" : "Beacon not found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Get all groups",
        "description" : "",
        "operationId" : "getGroupList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Group" ],
        "summary" : "Add a group",
        "description" : "",
        "operationId" : "addGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Group to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/groups/find" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Finds group by name",
        "description" : "Multiple names values can be provided with comma separated strings",
        "operationId" : "getGroupByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "/groups/{id}" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Get a group",
        "description" : "",
        "operationId" : "getGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Group" ],
        "summary" : "Delete a group",
        "description" : "",
        "operationId" : "deleteRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/lights" : {
      "get" : {
        "tags" : [ "Light" ],
        "summary" : "Get all lights",
        "description" : "",
        "operationId" : "getLightList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Light"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Light" ],
        "summary" : "Add a light",
        "description" : "",
        "operationId" : "addLight",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Light"
            }
          }
        }
      }
    },
    "/lights/find" : {
      "get" : {
        "tags" : [ "Light" ],
        "summary" : "Finds lights by name",
        "description" : "Multiple names values can be provided with comma separated strings",
        "operationId" : "getLightByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Light"
              }
            }
          }
        }
      }
    },
    "/lights/scan" : {
      "post" : {
        "tags" : [ "Light" ],
        "summary" : "Scan the whole house for lights",
        "description" : "",
        "operationId" : "scanLightsFromVendor",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Light"
              }
            }
          }
        }
      }
    },
    "/lights/{id}" : {
      "get" : {
        "tags" : [ "Light" ],
        "summary" : "Get a light",
        "description" : "",
        "operationId" : "getLight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Light"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Light" ],
        "summary" : "Delete a light",
        "description" : "",
        "operationId" : "deleteLight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/lights/{id}/turn/off" : {
      "post" : {
        "tags" : [ "Light" ],
        "summary" : "Turn off a light",
        "description" : "",
        "operationId" : "turnLightOff",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/lights/{id}/turn/on" : {
      "post" : {
        "tags" : [ "Light" ],
        "summary" : "Turn on a light",
        "description" : "",
        "operationId" : "turnLightOn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Get all roles",
        "description" : "",
        "operationId" : "getRolesList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ROLE_LIGHTS_TOGGLE", "ROLE_SETTINGS_ADMIN", "ROLE_ADMIN" ]
              }
            }
          }
        }
      }
    },
    "/rooms" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all rooms",
        "description" : "",
        "operationId" : "getRoomList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Room"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Add a room",
        "description" : "",
        "operationId" : "addRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Room to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Room"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success, room is saved",
            "schema" : {
              "$ref" : "#/definitions/Room"
            }
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rooms/find" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Find rooms by name",
        "description" : "Multiple names values can be provided with comma separated strings",
        "operationId" : "getRoomByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Room"
              }
            }
          }
        }
      }
    },
    "/rooms/{id}" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get a room",
        "description" : "",
        "operationId" : "getRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the room to retrieve",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Room"
            }
          },
          "404" : {
            "description" : "Room not found"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Delete a room",
        "description" : "",
        "operationId" : "deleteRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the room to remove",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed"
          },
          "404" : {
            "description" : "Room not found"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rooms/{roomId}/beacons/attach/{beaconId}" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Attach a beacon to a specified room",
        "description" : "",
        "operationId" : "attachBeaconToRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "ID of the room",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "beaconId",
          "in" : "path",
          "description" : "ID of the beacon",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/rooms/{roomId}/lights/attach/{lightId}" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Attach a light to a specified room",
        "description" : "",
        "operationId" : "attachLightToRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "ID of the room",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lightId",
          "in" : "path",
          "description" : "ID of the light",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/rules" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "Get all rules",
        "description" : "",
        "operationId" : "getRuleList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Rule"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Rule" ],
        "summary" : "Add a rule",
        "description" : "",
        "operationId" : "addRoom",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Rule to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Rule"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success, rule is saved",
            "schema" : {
              "$ref" : "#/definitions/Rule"
            }
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rules/{id}" : {
      "get" : {
        "tags" : [ "Rule" ],
        "summary" : "Get a rule",
        "description" : "",
        "operationId" : "getRule",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the rule to retrieve",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Rule"
            }
          },
          "404" : {
            "description" : "Rule not found"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Rule" ],
        "summary" : "Update a rule",
        "description" : "",
        "operationId" : "updateRule",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the rule to update",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Rule to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Rule"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Rule"
            }
          },
          "404" : {
            "description" : "Rule not found"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Rule" ],
        "summary" : "Delete a rule",
        "description" : "",
        "operationId" : "deleteRule",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the rule to remove",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed"
          },
          "404" : {
            "description" : "Rule not found"
          },
          "422" : {
            "description" : "Wrong input parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get all users",
        "description" : "",
        "operationId" : "getUserList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create a user",
        "description" : "",
        "operationId" : "addUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApprovedUserRegistration"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/users/find" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Finds user by username",
        "description" : "Multiple names values can be provided with comma separated strings",
        "operationId" : "getUserByUsername",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/users/{id}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get a user",
        "description" : "",
        "operationId" : "getUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Delete a user",
        "description" : "",
        "operationId" : "deleteUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/vendor/estimote/auth" : {
      "post" : {
        "tags" : [ "[VENDOR] Estimote" ],
        "summary" : "Authenticate to estimote API",
        "description" : "",
        "operationId" : "auth",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/vendor/estimote/beacons" : {
      "get" : {
        "tags" : [ "[VENDOR] Estimote" ],
        "summary" : "List beacons",
        "description" : "",
        "operationId" : "getBeaconsList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EstimoteBeacon"
              }
            }
          }
        }
      }
    },
    "/vendor/hue/auth" : {
      "post" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "Authenticate to HUE API",
        "description" : "",
        "operationId" : "auth",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/vendor/hue/bridges" : {
      "get" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "List bridges",
        "description" : "",
        "operationId" : "getBridgeList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PHAccessPoint"
              }
            }
          }
        }
      }
    },
    "/vendor/hue/bridges/linked" : {
      "get" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "List bridges",
        "description" : "",
        "operationId" : "getLinkedBridgesList",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PHAccessPoint"
              }
            }
          }
        }
      }
    },
    "/vendor/hue/bridges/scan" : {
      "get" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "Scan for existing bridges",
        "description" : "",
        "operationId" : "scanBridges",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/vendor/hue/lights" : {
      "get" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "List bridges",
        "description" : "",
        "operationId" : "getLights",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PHLight"
              }
            }
          }
        }
      }
    },
    "/vendor/hue/lights/{uid}" : {
      "post" : {
        "tags" : [ "[VENDOR] Philips HUE" ],
        "summary" : "Update hue light state",
        "description" : "",
        "operationId" : "updateLight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "uid",
          "in" : "path",
          "description" : "UID of lamp that need to be updated",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "State that will be applied to this lamp",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HueLamp"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "basicAuth" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "ApprovedUserRegistration" : {
      "type" : "object",
      "required" : [ "plainPassword", "username", "verificationPlainPassword" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 45
        },
        "plainPassword" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 60
        },
        "verificationPlainPassword" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 60
        },
        "groupId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Beacon" : {
      "type" : "object",
      "required" : [ "minor", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 45
        },
        "minor" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "vendor" : {
          "type" : "string",
          "enum" : [ "ESTIMOTE" ]
        },
        "icon" : {
          "type" : "string",
          "enum" : [ "ESTIMOTE" ]
        },
        "room" : {
          "$ref" : "#/definitions/Room"
        },
        "consumers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Consumer"
          }
        },
        "uuid" : {
          "type" : "string"
        },
        "iconUrl" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Consumer" : {
      "type" : "object",
      "required" : [ "name", "os", "type", "uid", "user" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "user" : {
          "$ref" : "#/definitions/User"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "COMPUTER", "SMARTPHONE", "TABLET" ]
        },
        "os" : {
          "type" : "string",
          "enum" : [ "WINDOWS", "MAC", "LINUX", "IOS", "ANDROID" ]
        },
        "uid" : {
          "type" : "string"
        },
        "nearestBeacon" : {
          "$ref" : "#/definitions/Beacon"
        },
        "apikey" : {
          "type" : "string"
        },
        "localized" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Device" : {
      "type" : "object",
      "required" : [ "name", "os", "type", "uid" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "os" : {
          "type" : "string",
          "enum" : [ "WINDOWS", "MAC", "LINUX", "IOS", "ANDROID" ]
        },
        "type" : {
          "type" : "string",
          "enum" : [ "COMPUTER", "SMARTPHONE", "TABLET" ]
        },
        "uid" : {
          "type" : "string"
        }
      }
    },
    "EstimoteBeacon" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string"
        },
        "mac" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "minor" : {
          "type" : "string"
        },
        "iconUrl" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Group" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 45
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "roles" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ROLE_LIGHTS_TOGGLE", "ROLE_SETTINGS_ADMIN", "ROLE_ADMIN" ]
          }
        }
      }
    },
    "HueLamp" : {
      "type" : "object",
      "properties" : {
        "color" : {
          "$ref" : "#/definitions/color"
        },
        "on" : {
          "type" : "boolean",
          "default" : false
        },
        "brigthness" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Light" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 45
        },
        "vendor" : {
          "type" : "string",
          "enum" : [ "PHILIPS_HUE" ]
        },
        "icon" : {
          "type" : "string",
          "enum" : [ "BULB", "LED_STRIP", "LIVING_COLOR" ]
        },
        "room" : {
          "$ref" : "#/definitions/Room"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ON", "OFF", "UNKNOWN" ]
        },
        "on" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "uuid" : {
          "type" : "string"
        },
        "iconUrl" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "PHAccessPoint" : {
      "type" : "object",
      "properties" : {
        "ipAddress" : {
          "type" : "string"
        },
        "macAddress" : {
          "type" : "string"
        },
        "bridgeId" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "PHLight" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "versionNumber" : {
          "type" : "string"
        },
        "modelNumber" : {
          "type" : "string"
        },
        "manufacturerName" : {
          "type" : "string"
        },
        "uniqueId" : {
          "type" : "string"
        },
        "luminaireUniqueId" : {
          "type" : "string"
        },
        "lastKnownLightState" : {
          "$ref" : "#/definitions/PHLightState"
        },
        "lightType" : {
          "type" : "string",
          "enum" : [ "UNKNOWN_LIGHT", "CT_COLOR_LIGHT", "COLOR_LIGHT", "CT_LIGHT", "DIM_LIGHT", "ON_OFF_LIGHT" ]
        }
      }
    },
    "PHLightState" : {
      "type" : "object",
      "properties" : {
        "on" : {
          "type" : "boolean",
          "default" : false
        },
        "brightness" : {
          "type" : "integer",
          "format" : "int32"
        },
        "hue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "saturation" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ct" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transitionTime" : {
          "type" : "integer",
          "format" : "int32"
        },
        "incrementBri" : {
          "type" : "integer",
          "format" : "int32"
        },
        "incrementCt" : {
          "type" : "integer",
          "format" : "int32"
        },
        "incrementHue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "incrementSat" : {
          "type" : "integer",
          "format" : "int32"
        },
        "incrementX" : {
          "type" : "number",
          "format" : "float"
        },
        "incrementY" : {
          "type" : "number",
          "format" : "float"
        },
        "x" : {
          "type" : "number",
          "format" : "float"
        },
        "y" : {
          "type" : "number",
          "format" : "float"
        },
        "reachable" : {
          "type" : "boolean",
          "default" : false
        },
        "effectMode" : {
          "type" : "string",
          "enum" : [ "EFFECT_UNKNOWN", "EFFECT_NONE", "EFFECT_COLORLOOP" ]
        },
        "alertMode" : {
          "type" : "string",
          "enum" : [ "ALERT_UNKNOWN", "ALERT_NONE", "ALERT_SELECT", "ALERT_LSELECT" ]
        },
        "colorMode" : {
          "type" : "string",
          "enum" : [ "COLORMODE_UNKNOWN", "COLORMODE_NONE", "COLORMODE_CT", "COLORMODE_HUE_SATURATION", "COLORMODE_XY" ]
        }
      }
    },
    "Person" : {
      "type" : "object",
      "required" : [ "firstName", "lastName" ],
      "properties" : {
        "firstName" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 45
        },
        "lastName" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 45
        }
      }
    },
    "Room" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 45
        },
        "lights" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Light"
          }
        },
        "beacons" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Beacon"
          }
        },
        "consumers" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Consumer"
          }
        }
      }
    },
    "Rule" : {
      "type" : "object",
      "required" : [ "code", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 45
        },
        "code" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "approved", "username" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 45
        },
        "approved" : {
          "type" : "boolean",
          "default" : false
        },
        "profile" : {
          "$ref" : "#/definitions/Person"
        },
        "consumers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Consumer"
          }
        },
        "group" : {
          "$ref" : "#/definitions/Group"
        },
        "roles" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "ROLE_LIGHTS_TOGGLE", "ROLE_SETTINGS_ADMIN", "ROLE_ADMIN" ]
          }
        }
      }
    },
    "UserRegistration" : {
      "type" : "object",
      "required" : [ "plainPassword", "username", "verificationPlainPassword" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 45
        },
        "plainPassword" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 60
        },
        "verificationPlainPassword" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 60
        }
      }
    },
    "YodaAuth" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "device" : {
          "$ref" : "#/definitions/Device"
        }
      }
    },
    "color" : {
      "type" : "object",
      "properties" : {
        "red" : {
          "type" : "integer",
          "format" : "int32"
        },
        "green" : {
          "type" : "integer",
          "format" : "int32"
        },
        "blue" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    }
  }
}